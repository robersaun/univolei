import os
from pathlib import Path
import streamlit as st

# --- Tentativa de usar PIL para obter dimens√µes das imagens (opcional) ---
try:
    from PIL import Image
    PIL_OK = True
except Exception:
    PIL_OK = False

st.set_page_config(
    page_title="Tutorial ‚Äî UniVolei Live Scout",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ===== Helpers =====
BASE_DIR = Path(__file__).resolve().parent
IMG_DIR = BASE_DIR / "../imgs"

def img_width_scaled(path: Path, scale: float = 0.6) -> int | None:
    """
    Retorna a largura em px escalada pelo 'scale' (ex.: 0.6 = 60% do tamanho original).
    Se PIL n√£o estiver dispon√≠vel ou falhar, retorna None (Streamlit cuida do fallback).
    """
    if not PIL_OK:
        return None
    try:
        with Image.open(path) as im:
            w, _ = im.size
        w_scaled = max(1, int(w * scale))
        return w_scaled
    except Exception:
        return None

# ===== T√≠tulo =====
st.markdown(
    "<h1 style='text-align:center; color:#1e3a8a; margin-top: .25rem'>üìò Tutorial UniVolei Live Scout</h1>",
    unsafe_allow_html=True
)

# ===== Estilos extras =====
st.markdown(
    """
    <style>
      .uv-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        box-shadow: 0 1px 4px rgba(15,23,42,.06);
        padding: 14px;
      }
      .uv-note {
        background:#eef2ff; border:1px solid #c7d2fe; padding:10px 12px; border-radius:10px;
      }
      .uv-muted { color:#64748b; }
      .uv-rodizio-text {
        font-size: 3em;              /* 3x maior */
        line-height: 1.15;
        font-weight: 700;
        color: #0f172a;
        margin-top: .25rem;
        margin-bottom: 1rem;
      }
      .uv-list li { margin: .25rem 0; }
      .uv-section-title {
        margin: .3rem 0 .8rem 0;
        font-weight: 800;
        color: #0f172a;
      }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown("<div class='topbar-row'>", unsafe_allow_html=True)
# Spacer gigante + coluna do bot√£o
spacer, c_close = st.columns([12, 1])  # aumente o 12 se quiser mais ‚Äúempurro‚Äù para a direita
with c_close:
    def _back_index():
        try:
            st.switch_page("index.py")
        except Exception:
            try:
                st.switch_page("../index.py")
            except Exception:
                st.write("Abrir o Index pelo menu lateral.")
    try:
        st.page_link("index.py", label="‚ùå Fechar")
    except Exception:
        st.button("‚ùå Fechar", on_click=_back_index, use_container_width=True)
st.markdown("</div>", unsafe_allow_html=True)

# ===== Tabs =====
tab1, tab2, tab3, tab4 = st.tabs(["In√≠cio", "Modo Jogo", "Hist√≥rico", "Rod√≠zio 5x1"])

# -------------------------------
# Tab 1 - In√≠cio (texto √† esquerda, imagem √† direita)
# -------------------------------
with tab1:
    c_text, c_img = st.columns([3, 2], gap="large")

    with c_text:
        st.markdown("### üîπ Acesso inicial", help="Informa√ß√µes b√°sicas de navega√ß√£o")
        st.markdown(
            """
            - Entre no endere√ßo: **https://univolei-scout.streamlit.app/**  
            - Caso exista **jogo em aberto**, o t√≠tulo e a data aparecer√£o automaticamente no cabe√ßalho.  
            - Na **primeira linha** voc√™ encontra os bot√µes principais:
              - **Time** ‚Üí cadastrar/editar o time e jogadoras.
              - **Jogo** ‚Üí iniciar ou continuar uma partida em andamento.
              - **Tutorial** ‚Üí abre esta p√°gina de instru√ß√µes.
              - **Hist√≥rico** ‚Üí acessar estat√≠sticas e an√°lises de jogos anteriores.
            
            ---
            O aplicativo salva dados em **Excel, DuckDB e Google Sheets** (quando habilitado), garantindo backup e hist√≥rico.
            """,
            unsafe_allow_html=True
        )

    with c_img:
        img_path = IMG_DIR / "print_1.jpg"
        # Sem esticar: manter tamanho natural
        if img_path.exists():
            st.image(str(img_path), caption="Tela inicial do aplicativo", use_container_width=False)
        else:
            st.warning(f"Imagem n√£o encontrada: {img_path}")

# -------------------------------
# Tab 2 - Modo Jogo (texto √† esquerda, imagem √† direita)
# -------------------------------
with tab2:
    c_text, c_img = st.columns([3, 2], gap="large")

    with c_text:
        st.markdown("### üîπ Modo Jogo (principal)", help="√Årea de marca√ß√£o de pontos")
        st.markdown(
            """
            O **Modo Jogo** √© o cora√ß√£o do sistema: √© aqui que voc√™ registra todas as jogadas da partida.  

            - **Bot√µes de Jogadoras** ‚Üí clique para marcar quem participou do rally.  
              - 1¬∫ clique = **Acerto** ‚úÖ  
              - 2¬∫ clique = **Erro** ‚ùå  
            - **Bot√£o ADV** ‚Üí registra pontos do advers√°rio.  
            - **Quadra Interativa (Heatmap)** ‚Üí clique na quadra para marcar a regi√£o de cada a√ß√£o.  
            - **Placar em tempo real** ‚Üí exibido sempre acima da quadra.  
            - **Gest√£o de Sets** ‚Üí abrir, fechar e finalizar sets; remover set vazio quando necess√°rio.

            ---
            üîë **Importante:**  
            O **Modo Jogo √© o principal local de marca√ß√£o de pontos**.  
            Cada a√ß√£o registrada aqui alimenta as estat√≠sticas do **Hist√≥rico** e direciona os treinos.
            """,
            unsafe_allow_html=True
        )

    with c_img:
        img_path = IMG_DIR / "print_2.jpg"
        # Sem esticar: manter tamanho natural
        if img_path.exists():
            st.image(str(img_path), caption="Modo Jogo ‚Äî principal √°rea de marca√ß√£o de pontos", use_container_width=False)
        else:
            st.warning(f"Imagem n√£o encontrada: {img_path}")

# -------------------------------
# Tab 3 - Hist√≥rico (sem imagem, apenas descri√ß√£o)
# -------------------------------
with tab3:
    st.markdown("### üîπ Hist√≥rico de Jogos", help="Dashboard anal√≠tico")
    st.markdown(
        """
        O **Hist√≥rico** √© o **dashboard central de an√°lise**.  

        **Principais recursos:**
        - üìã **Lista de jogos**: ID, data, advers√°rio, sets e status (aberto/fechado).  
        - ‚úÖ Resultado destacado: Vit√≥ria, Derrota ou Empate.  
        - üîç **Filtros e buscas** por ID, data, advers√°rio e status.  
        - üìä **Estat√≠sticas detalhadas** de cada partida:
          - Evolu√ß√£o do placar ao longo dos sets.
          - Comparativo por fundamento (ataque, passe, saque etc.).
          - Erros cometidos organizados em tabela.
          - Mapas de calor das jogadas (zonas de ataque/defesa).

        ---
        üí° **Refor√ßo:**  
        O **Hist√≥rico √© o local-chave para an√°lise de desempenho e defini√ß√£o de treinos espec√≠ficos**.  
        """,
        unsafe_allow_html=True
    )

# -------------------------------
# Tab 4 - Rod√≠zio 5x1 (imagens 40% menores + textos 3x maiores)
# -------------------------------
with tab4:
    st.markdown("### üîπ Rod√≠zio 5x1 ‚Äî Refer√™ncia visual e explicativa")

    # Lista de (arquivo, texto)
    rod_items = [
        ("p1.jpg", "**P1 (Levantadora):** posi√ß√£o 1, arma jogadas r√°pidas, cobre defesa direita."),
        ("p2.jpg", "**P2 (Oposta):** atacante pela direita, respons√°vel tamb√©m por bolas de fundo."),
        ("p3.jpg", "**P3 (Central):** ataque r√°pido pelo meio, foco em bloqueios centrais."),
        ("p4.jpg", "**P4 (Ponteira):** atacante pela esquerda, importante no passe e coberturas."),
        ("p5.jpg", "**P5 (Defensora/Ponteira):** fundo esquerdo, prioridade em recep√ß√£o."),
        ("p6.jpg", "**P6 (L√≠bero ou Ponteira de fundo):** fundo central, defesa principal e recep√ß√£o de saque."),
    ]

    for fname, txt in rod_items:
        img_path = IMG_DIR / fname

        # Layout: imagem √† esquerda (menor), texto gigante √† direita
        c_img, c_txt = st.columns([2, 3], gap="large")

        with c_img:
            if img_path.exists():
                # Tenta calcular largura ~60% do original (40% menor)
                width_scaled = img_width_scaled(img_path, scale=0.6)
                if width_scaled is not None:
                    st.image(str(img_path), caption=f"Rod√≠zio ‚Äî {fname[:-4].upper()}", width=width_scaled)
                else:
                    # Fallback: se n√£o conseguir medir, usa container_width com clamp via column
                    st.image(str(img_path), caption=f"Rod√≠zio ‚Äî {fname[:-4].upper()}", use_container_width=False)
            else:
                st.warning(f"Imagem n√£o encontrada: {img_path}")

        with c_txt:
            # Texto 3x maior (CSS)
            st.markdown(f"<div class='uv-rodizio-text'>{txt}</div>", unsafe_allow_html=True)
